#version 430

struct particle
{
    vec4 posrot;
	vec4 velocity;
};

uniform vec3 u_GenBox;
uniform float u_ParticleCount;

layout(std140, binding = 0) buffer ub_Particles
{
    particle particles[];
};

float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

float random_range(vec2 st, float min, float max) {
	return min + random(st) * (max - min);
}

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint particleIndex = gl_GlobalInvocationID.x;

	float rngSeed = (float(gl_GlobalInvocationID.x) / u_ParticleCount) * 0.5f + 0.5f;
	float x = random_range(vec2(rngSeed, 0.0f), -u_GenBox.x, u_GenBox.x);
	float y = random_range(vec2(rngSeed, 0.5f),		   0.0f, u_GenBox.y);
	float z = random_range(vec2(rngSeed, 1.0f), -u_GenBox.z, u_GenBox.z);

    particles[particleIndex].posrot.xyz = vec3(x, y, z);

	float vx = random_range(vec2(rngSeed, 0.1f), -4.0f, 4.0f);
	float vz = random_range(vec2(rngSeed, 0.9f), -4.0f, 4.0f);

	particles[particleIndex].velocity.xyz = vec3(vx, 0.0f, vz) * random_range(vec2(rngSeed, 0.33f), 0.1f, 0.6f);
}
